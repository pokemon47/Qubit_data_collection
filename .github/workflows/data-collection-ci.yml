# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Qubit Data Collection

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  testing-and-coverage:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with unittest and record test coverage
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
      run: |
        set -o pipefail
        python3 -m coverage run -m unittest ./tests/test_*.py | tee test_results.txt
        coverage report -m | tee coverage.txt
    - name: Upload test results as a GitHub artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test_results_incomplete
        path: test_results.txt
    - name: Upload coverage as a GitHub artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage_incomplete
        path: coverage.txt

  linting:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        set -o pipefail
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics | tee linting.txt
        flake8 src/ --count --max-complexity=10 --statistics --ignore=E501 | tee -a linting.txt
        # flake8 tests/ --count --max-complexity=10 --statistics --ignore=E501
    - name: Upload linting results as a GitHub artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: linting_incomplete
        path: linting.txt

  type-checking:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy types-fpdf2
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Type checking with mypy
      run: |
        set -o pipefail
        python3 -m mypy src/ | tee type_checking.txt
    - name: Upload type checking as a GitHub artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: type_checking_incomplete
        path: type_checking.txt

  generate-pdf-report:

    runs-on: ubuntu-latest
    needs: [testing-and-coverage, linting, type-checking]
    if: always()

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fpdf2
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Download results from previous jobs
      uses: actions/download-artifact@v4
    - name: Generate PDF report
      run: |
        python3 generate_pdf_report.py
    - name: Upload PDF report as a GitHub artifact
      uses: actions/upload-artifact@v4
      with:
        name: data-analytics-testing-report
        path: testing_report.pdf
